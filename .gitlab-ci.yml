stages:
  - prepare
  # - linter
  - build_and_test
  # - unit_tests
  - deploy

variables:
  BUILD_NAME: "TowerDefenceGame"
  UNITY_ACTIVATION_FILE: "./unity3d.alf"
  UNITY_VERSION: "2022.3.32f1" 
  IMAGE: "unityci/editor" # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: "1" # This will automatically use latest v1.x.x, see https://github.com/game-ci/docker/releases
  UNITY_DIR: "$CI_PROJECT_DIR" # this needs to be an absolute path. Defaults to the root of your tree.
  # You can expose this in Unity via Application.version
  VERSION_NUMBER_VAR: "$CI_COMMIT_REF_SLUG-$CI_PIPELINE_ID-$CI_JOB_ID"
  VERSION_BUILD_VAR: "$CI_PIPELINE_IID"
  DOTNET_CLI_TELEMETRY_OPTOUT: "true"
  DOTNET_NOLOGO: "true"
  NUGET_XMLDOC_MODE: "skip"
  NUGET_PACKAGES: "$CI_PROJECT_DIR/.nuget/packages"
  DOTNET_SDK_VERSIONS: "6.0.x 7.0.x 8.0.x"  # Установите версии SDK, которые вам нужны

image: $IMAGE:$UNITY_VERSION-base-3.1.0

get-unity-version:
  image: alpine
  stage: prepare
  variables:
    GIT_DEPTH: "1"
  script:
    - echo UNITY_VERSION=$(cat $UNITY_DIR/ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:.*" | awk '{ print $2}') | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
  needs:
    - job: get-unity-version
      artifacts: true

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.unity_defaults: &unity_defaults
  <<: [*unity_before_script, *cache, *license]

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  <<: *unity_before_script
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: prepare
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

.test: &test
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/test.sh && ./ci/test.sh
  artifacts:
    when: always
    expire_in: 2 weeks
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - gitlab-org
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

# test-playmode:
#   <<: *test
#   variables:
#     TEST_PLATFORM: "playmode"
#     TESTING_TYPE: "NUNIT"

# test-editmode:
#   <<: *test
#   variables:
#     TEST_PLATFORM: "editmode"
#     TESTING_TYPE: "NUNIT"

# uncomment the following blocks if you'd like to have junit reporting unity test results in gitlab
# We currently have the following issue which prevents it from working right now, but you can give
# a hand if you're interested in this feature:
# https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/151

# .test-with-junit-reports: &test-with-junit-reports
#   stage: build_and_test
#   <<: *unity_defaults
#   script:
#     # This could be made faster by adding these packages to base image or running in a separate job (and step)
#     # We could use an image with these two depencencies only and only do the saxonb-xslt command on
#     # previous job's artifacts
#     - apt-get update && apt-get install -y default-jre libsaxonb-java
#     - chmod +x ./ci/test.sh && ./ci/test.sh
#     - saxonb-xslt -s $UNITY_DIR/$TEST_PLATFORM-results.xml -xsl $CI_PROJECT_DIR/ci/nunit-transforms/nunit3-junit.xslt >$UNITY_DIR/$TEST_PLATFORM-junit-results.xml
#   artifacts:
#     when: always
#     paths:
#     # This is exported to allow viewing the Coverage Report in detail if needed
#     - $UNITY_DIR/$TEST_PLATFORM-coverage/
#     reports:
#       junit:
#         - $UNITY_DIR/$TEST_PLATFORM-junit-results.xml
#         - "$UNITY_DIR/$TEST_PLATFORM-coverage/coverage.xml"
#     expire_in: 2 weeks
#   # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
#   # you may need to remove or replace these to fit your need if you are using your own runners
#   tags:
#     - gitlab-org
#   coverage: /<Linecoverage>(.*?)</Linecoverage>/

# test-playmode-with-junit-reports:
#   <<: *test-with-junit-reports
#   variables:
#     TEST_PLATFORM: "playmode"
#     TESTING_TYPE: "JUNIT"

# test-editmode-with-junit-reports:
#   <<: *test-with-junit-reports
#   variables:
#     TEST_PLATFORM: "editmode"
#     TESTING_TYPE: "JUNIT"

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - gitlab-org

# Note: build target names changed in recent versions, use this for versions < 2017.2:
# build-StandaloneOSXUniversal:
#   <<: *build
#   variables:
#     BUILD_TARGET: "StandaloneOSXUniversal"

# For webgl support, you need to set Compression Format to Disabled for v0.9. See https://github.com/game-ci/docker/issues/75


# lint:
#   stage: build_and_test
#   image: ghcr.io/github/super-linter:latest
#   variables:
#     DEFAULT_WORKSPACE: "$CI_PROJECT_DIR"
#     LINTER_RULES_PATH: "$CI_PROJECT_DIR/.github/linters" # Adjust if your linter configurations are located elsewhere
#     VALIDATE_ALL_CODEBASE: "true" # Set to false if you want to lint only changed files
#   script:
#     - super-linter



lint:
  stage: build_and_test
  image: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - dotnet tool install -g dotnet-format
    - export PATH="$PATH:/root/.dotnet/tools"
    - dotnet format tower-defence-game-group-26.sln --verify-no-changes --verbosity detailed

unit_tests:
  stage: build_and_test
  image: unityci/editor:2022.3.32f1-base-3.1.0
  before_script:
    # Декодируем содержимое переменной обратно в файл
    - echo "$UNITY_LICENSE_BASE64" | base64 -d > Unity_v2022.x.ulf
    # Проверка содержимого декодированного файла
    - cat Unity_v2022.x.ulf
    - which unity-editor
    # Активируем лицензию
    - unity-editor -batchmode -nographics -quit -manualLicenseFile Unity_v2022.x.ulf
  script:
    - which unity-editor
    # Использовать найденный путь к Unity Editor
    - unity-editor -runTests -projectPath . -testPlatform PlayMode -logFile - -testResults results.xml
  artifacts:
    when: always
    paths:
      - results.xml
  only:
    - main
    - testing



# build-WebGL:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
#   # Temporary workaround for https://github.com/game-ci/docker/releases/tag/v0.9 and webgl support in current project to prevent errors with missing ffmpeg
#   before_script:
#     - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
#     - apt-get update && apt-get install ffmpeg -y
#   variables:
#     BUILD_TARGET: "WebGL"

pages:
  image: alpine:latest
  stage: deploy
  script:
    - mv "$UNITY_DIR/Builds/WebGL/${BUILD_NAME}" public
  artifacts:
    paths:
      - public
  only:
    - $CI_DEFAULT_BRANCH

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
